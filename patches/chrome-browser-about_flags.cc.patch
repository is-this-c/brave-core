diff --git a/chrome/browser/about_flags.cc b/chrome/browser/about_flags.cc
index 052e701a571d4cdbb2cd91b3d2455fe2ce3f0b13..0496aa0be492535166c0c691bb65187b83d86938 100644
--- a/chrome/browser/about_flags.cc
+++ b/chrome/browser/about_flags.cc
@@ -3734,6 +3734,7 @@ const FeatureEntry::Choice kAccountBookmarksAndReadingListBehindOptInChoices[] =
 //
 // When adding a new choice, add it to the end of the list.
 const FeatureEntry kFeatureEntries[] = {
+    BRAVE_ABOUT_FLAGS_FEATURE_ENTRIES
 // Include generated flags for flag unexpiry; see //docs/flag_expiry.md and
 // //tools/flags/generate_unexpire_flags.py.
 #include "build/chromeos_buildflags.h"
@@ -5560,6 +5561,8 @@ const FeatureEntry kFeatureEntries[] = {
      flag_descriptions::kImmersiveFullscreenName,
      flag_descriptions::kImmersiveFullscreenDescription, kOsMac,
      FEATURE_VALUE_TYPE(features::kImmersiveFullscreen)},
+#elif BUILDFLAG(IS_WIN) || BUILDFLAG(IS_LINUX)
+    {"enable-immersive-fullscreen-toolbar", flag_descriptions::kImmersiveFullscreenName, flag_descriptions::kImmersiveFullscreenDescription, kOsWin | kOsLinux,  FEATURE_VALUE_TYPE(features::kImmersiveFullscreen)},
 #endif  // BUILDFLAG(IS_MAC)
     {"enable-web-payments-experimental-features",
      flag_descriptions::kWebPaymentsExperimentalFeaturesName,
@@ -11214,6 +11217,7 @@ void GetStorage(Profile* profile, GetStorageCallback callback) {
 
 bool ShouldSkipConditionalFeatureEntry(const flags_ui::FlagsStorage* storage,
                                        const FeatureEntry& entry) {
+  BRAVE_SHOULD_SKIP_CONDITIONAL_FEATURE_ENTRY
 #if BUILDFLAG(IS_CHROMEOS_ASH)
   version_info::Channel channel = chrome::GetChannel();
   // enable-projector-server-side-speech-recognition is only available if
