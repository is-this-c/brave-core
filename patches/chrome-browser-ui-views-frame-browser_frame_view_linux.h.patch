diff --git a/chrome/browser/ui/views/frame/browser_frame_view_linux.h b/chrome/browser/ui/views/frame/browser_frame_view_linux.h
index 46f1a23a093e2e26f30a2b0f0e9f939b28162378..bca1ead3844d197c3a873034aa76e9b2b1e8b711 100644
--- a/chrome/browser/ui/views/frame/browser_frame_view_linux.h
+++ b/chrome/browser/ui/views/frame/browser_frame_view_linux.h
@@ -8,6 +8,7 @@
 #include "base/memory/raw_ptr.h"
 #include "chrome/browser/ui/views/frame/browser_frame_view_layout_linux.h"
 #include "chrome/browser/ui/views/frame/opaque_browser_frame_view.h"
+#include "ui/base/metadata/metadata_header_macros.h"
 #include "ui/linux/window_button_order_observer.h"
 
 namespace ui {
@@ -18,6 +19,7 @@ class LinuxUi;
 // render client side decorations (shadow, border, and rounded corners).
 class BrowserFrameViewLinux : public OpaqueBrowserFrameView,
                               public ui::WindowButtonOrderObserver {
+  METADATA_HEADER(BrowserFrameViewLinux, OpaqueBrowserFrameView)
  public:
   BrowserFrameViewLinux(BrowserFrame* frame,
                         BrowserView* browser_view,
@@ -36,6 +38,10 @@ class BrowserFrameViewLinux : public OpaqueBrowserFrameView,
   SkRRect GetRestoredClipRegion() const override;
   int GetTranslucentTopAreaHeight() const override;
 
+  // TODO(simonhong): Remove patch
+  // BrowserNonClientFrameView overrides:
+  void OnFullscreenStateChanged() override;
+
   // Gets the shadow metrics (radius, offset, and number of shadows).  This will
   // always return shadow values, even if shadows are not actually drawn.
   // `active` indicates if the shadow will be drawn on a focused browser window.
